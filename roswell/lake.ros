#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -m lake -Q -- $0 "$@"
|#

(ql:quickload :lake :silent t)
(mapc #'unintern '(print-help print-tasks main))

(defun print-help ()
  (write-line "Usage: lake [options] [target] ...")
  (write-line "Options:")
  (write-line "  -f FILE       Use FILE as a lakefile.")
  (write-line "  -h            Print this message and exit.")
  (write-line "  -j INTEGER    Execute multiple tasks simultaneously.")
  (write-line "  -T            Display the tasks with descriptions, then exit.")
  (write-line "  -v            Verbose mode."))

(defun print-tasks (pathname)
  (if pathname
      (lake:display-tasks :pathname pathname)
      (lake:display-tasks)))

(defun main (&rest argv)
  (declare (ignorable argv))
  (let (targets pathname jobs f-mode j-mode v-mode)
    (loop for arg in argv
          do (cond
               (f-mode (setf pathname arg)
                       (setf f-mode nil))
               (j-mode (setf jobs (parse-integer arg))
                       (setf j-mode nil))
               ((string= "-f" arg) (setf f-mode t))
               ((string= "-h" arg) (print-help)
                (ros:quit 1))
               ((string= "-j" arg) (setf j-mode t))
               ((string= "-T" arg) (print-tasks pathname)
                (ros:quit 1))
               ((string= "-v" arg) (setf v-mode t))
               (t (push arg targets))))
    (handler-case
        (let ((params `(:verbose ,v-mode
                        ,@(when jobs
                            `(:jobs ,jobs))
                        ,@(when pathname
                            `(:pathname ,pathname)))))
          (if targets
              (loop for target in (nreverse targets)
                    do (apply #'lake:lake :target target params))
              (apply #'lake:lake params))
          (ros:quit 0))
     (lake:lake-command-error (e)
       (format *error-output* "~a~%" e)
       (ros:quit -1)))))
